---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta
      name="google-site-verification"
      content="QajpGGQoBUWPWVjjbTovpjj6KqcvdlOwSdQFM5jXFzs"
    />

    <!-- Primary Tags -->
    <title>{title}</title>
    <meta name="title" content="K3ndev Portfolio" />
    <meta
      name="description"
      content="Explore
      my
      portfolio
      that
      build
      in
      astro
      with
      solid.js"
    />

    <!-- Twitter -->
    <meta property="twitter:title" content="K3ndev Portfolio" />
    <meta
      property="twitter:description"
      content="Explore my portfolio that build in astro with solid.js"
    />
    <meta
      property="twitter:image"
      content="https://astro-k3ndev.vercel.app/open_graph_image.png"
    />
    <meta property="twitter:url" content="https://astro-k3ndev.vercel.app" />
    <meta
      property="twitter:card"
      content="https://astro-k3ndev.vercel.app/open_graph_image.png"
    />

    <!-- Facebook -->
    <meta property="og:title" content="K3ndev Portfolio" />
    <meta
      property="og:description"
      content="Explore my portfolio that build in astro with solid.js"
    />
    <meta property="og:url" content="https://astro-k3ndev.vercel.app" />
    <meta
      property="og:image"
      content="https://astro-k3ndev.vercel.app/open_graph_image.png"
    />
    <meta property="og:type" content="website" />
  </head>
  <body class="min-h-screen flex flex-col text-white">
    <div id="stars"></div>
    <div id="stars2"></div>
    <slot />
  </body>
</html>
<style is:global>
  html {
    font-family: system-ui, sans-serif;
    background: rgb(17, 24, 39);
    background: -moz-radial-gradient(
      circle,
      rgba(17, 24, 39, 1) 7%,
      rgba(17, 22, 35, 1) 37%,
      rgba(15, 14, 14, 1) 95%
    );
    background: -webkit-radial-gradient(
      circle,
      rgba(17, 24, 39, 1) 7%,
      rgba(17, 22, 35, 1) 37%,
      rgba(15, 14, 14, 1) 95%
    );
    background: radial-gradient(
      circle,
      rgba(17, 24, 39, 1) 7%,
      rgba(17, 22, 35, 1) 37%,
      rgba(15, 14, 14, 1) 95%
    );
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#111827",endColorstr="#0f0e0e",GradientType=1);
  }


  #stars {
    width: 2px;
    height: 2px;
    background: transparent;
    border-radius: 100%;
    animation: blink 2s infinite;
    position: absolute;
    left: 0;
    top: 0;
  }

  #stars2 {
    width: 3px;
    height: 3px;
    box-shadow: $shadows-medium;
    background: transparent;
    border-radius: 100%;
    animation: blink 4s infinite;
    position: absolute;
    left: 0;
    top: 0;
  }

  #stars3 {
    width: 4px;
    height: 4px;
    box-shadow: $shadows-big;
    background: transparent;
    border-radius: 100%;
    animation: blink 3s infinite;
    position: absolute;
    left: 0;
    top: 0;
  }

  @keyframes blink {
    0% {
      opacity: 1;
    }

    50% {
      opacity: 0.2;
    }

    100% {
      opacity: 1;
    }
  }
</style>

<script>
const generateStart = (n) => {
  let value = `${Math.floor(Math.random() * 2000)}px ${Math.floor(Math.random() * 2000)}px rgba(165, 190, 195, ${Math.random().toFixed(1)})`;

  for (let i = 0; i <= n; i++) {
    value += `, ${Math.floor(Math.random() * 2000)}px ${Math.floor(Math.random() * 2000)}px rgba(184, 174, 131, ${Math.random().toFixed(1)})`;
  }

  return value;
}

let starsElement1 = document.getElementById('stars');
let starsElement2 = document.getElementById('stars2');
starsElement1.style.boxShadow = generateStart(300);
starsElement2.style.boxShadow = generateStart(200);
</script>
